---
import ThemeToggle from "./ThemeToggle.astro";
import "@/styles/global.css";

const navItems = [
    {
        title: "Experiencia",
        label: "experiencia",
        url: "/#experiencia",
    },
    {
        title: "Proyectos",
        label: "proyectos",
        url: "/#proyectos",
    },
    {
        title: "Sobre m√≠",
        label: "sobre-mi",
        url: "/#sobre-mi",
    },
    {
        title: "Contacto",
        label: "contacto",
        url: "mailto:galvezlaoj@gmail.com",
    },
];
---

<header
    class={"fixed top-0 z-10 flex justify-center items-center w-full mx-auto mt-2"}
>
    <!-- <img src={logo.src} alt="Logo" class="rounded-full h-12 w-12" /> -->

    <nav
        class={"border border-black rounded-full px-3 py-1 flex flex-row items-center bg-neutral-200 dark:bg-black/50 backdrop-blur-2xl"}
    >
        {
            navItems.map((link) => (
                <a
                    class="relative block px-2 py-2 transition hover:text-orange-400 dark:hover:text-yellow-400 dark:text-gray-200 justify-center items-center"
                    aria-label={link.label}
                    href={link.url}
                >
                    {link.title}
                </a>
            ))
        }
        <ThemeToggle />
    </nav>
</header>

<script is:inline>
    document.addEventListener("astro:page-load", () => {
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll("header nav a");

        const callback = (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") == entry.target.id
                        ) {
                            item.classList.add("text-blue-500");
                        } else {
                            item.classList.remove("text-blue-500");
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadow 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @reference "../styles/global.css";

    nav {
        @apply dark:bg-gray-800/90 bg-white/50;
    }

    @keyframes nav-shadow {
        0% {
            /* @inline dark:bg-gray-800/0 bg-white/0; */
            background-color: transparent;
            backdrop-filter: blur(0);
            box-shadow: none;
            outline: none;
        }
        to {
            /* @inline shadow-lg ring-1 backdrop-blur ring-white/10; */

            backdrop-filter: blur(10px);
            box-shadow:
                0 10px 15px -3px rgba(0, 0, 0, 0.1),
                0 4px 6px -2px rgba(0, 0, 0, 0.05);
            /* equivalencia a `ring-1 ring-white/10` */
            outline: 1px solid rgba(255, 255, 255, 0.1);
        }
    }
</style>
